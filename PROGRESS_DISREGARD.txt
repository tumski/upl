Project Implementation Progress Guide
This guide outlines a step-by-step process for setting up and implementing the project from initial scaffolding to the final user journey. It includes checkpoints, recommended task order, and priorities to ensure a smooth and consistent development flow.

Key Principles:

Set up core infrastructure (TypeScript, pnpm, ESLint, Prettier) immediately.
Establish i18n and reusable components before building screens.
Integrate React Query, tRPC, and authentication early for consistent data handling.
Develop each screen individually, verifying that i18n and reusable components are in place.
Abstract all 3rd-party services behind backend APIs from the start.
Perform frequent testing and incremental integration of external APIs (Stripe, Prodigi, Topaz).

PHASE 0 - INITIAL SETUP

- set up environment
  - nextjs
  - git repo
- set up typescript config, prettier and eslint

PHASE 1 - I18N SETUP

- set up next-intl according to documentation
- proof of concept that i18n works by changing landing page to simple hero header with copy inlanguage files
  - incude basic tailwind styling
  - include shadcn by this stage
- implement Header and LanguageSwitcher compoennts and include it in the landing page

---

## DIREGARD THE FOLLOWING

Phase 0: Initial Project Setup ✅

Checkpoint 0.1: Repo Initialization ✅

[x] Create a new Next.js app (with TypeScript) using pnpm: pnpm create next-app --ts
[x] Initialize Git and set up .gitignore.
[x] Add ESLint, Prettier, and corresponding configs following RULES.md.
[x] Ensure strict TypeScript mode in tsconfig.json.

Checkpoint 0.2: Basic Dependencies ✅

[x] Install core dependencies: pnpm add next-intl react-query @tanstack/react-query @prisma/client prisma zod @trpc/server @trpc/client @trpc/next @vercel/blob stripe tailwindcss shadcn/ui
[x] Run npx prisma init and configure schema.prisma.
[x] Set up Tailwind and shadcn/ui per their documentation.

Checkpoint 0.3: Project Configuration ✅

[x] Set up pnpm workspaces if needed (not needed for this project).
[x] Create .env.example with placeholders for environment variables (e.g., STRIPE_SECRET_KEY, PRODIGI_API_KEY, TOPAZ_API_KEY, DATABASE_URL).
[x] Update package.json scripts per RULES.md (lint, type-check, test, build).

Checkpoint 0.4: Lint & Formatting ✅

[x] Run initial lint and format commands.
[x] Ensure no lint errors before starting the next phase.

Phase 1: Internationalization (i18n) Setup ✅

Checkpoint 1.1: i18n Base Configuration ✅

[x] Configure next-intl in Next.js config and middleware
[x] Create messages/ directory with initial en.json and other locale files (de.json, nl.json, da.json, pl.json)
[x] Implement automatic locale detection (via middleware and URL-based routing)

Checkpoint 1.2: Translation Hooks & Utilities ✅

[x] Create a custom useTranslations hook with type-safe keys
[x] Set up i18n configuration files (request.ts, navigation.ts, config.ts)
[x] Configure pathnames and locale prefix settings

Checkpoint 1.3: Verify Fallbacks & Default Locale ✅

[x] Configure English (en) as default locale
[x] Set up locale validation and fallback handling in request config
[x] Configure proper locale prefix mode ("always")

Phase 2: Core Infrastructure (API & State Management) ✅

Checkpoint 2.1: tRPC & Backend API Setup ✅

[x] Set up server/ directory with a basic tRPC router.
[x] Configure createContext and appRouter.
[x] Add minimal test queries and mutations to ensure tRPC is working.

Checkpoint 2.2: Database Integration (Prisma) ✅

[x] Define initial Prisma models (e.g., User, Order, UploadedImage).
[x] Run pnpm prisma migrate dev to apply migrations.
[x] Test a simple tRPC query that reads from the DB.

Checkpoint 2.3: React Query Integration ✅

[x] Wrap \_app.tsx with QueryClientProvider.
[x] Test a simple query hook to fetch something from tRPC, confirm caching works.

Phase 3: Security & Abstraction of 3rd Parties ✅

Checkpoint 3.1: Abstract 3rd Party Integrations ✅

[x] Create server-side modules for Topaz (server/api/topaz.ts), Stripe (server/api/payment.ts), and Prodigi (server/api/fulfillment.ts).
[x] Implement PLACEHOLDER functions for upscaling, payment session creation, and order submission.
[x] Created service modules that will be used by tRPC procedures, keeping third-party details hidden from frontend.

Phase 4: Reusable UI Components & Basic Layout ✅

Checkpoint 4.1: UI Foundations ✅

[x] Create base reusable components: Button, Input, Layout, Header, Footer.
[x] Ensure all text in these components is sourced from en.json and other locales.
[x] Add a LanguageSelector component to switch locales.

Checkpoint 4.2: Image Upload & Preview Component (Core Reusable) ✅

[x] Implement ImageUploader component using Vercel Blob for storage.
[x] Create a useImageUploader hook to encapsulate logic.
[x] Test file upload, preview thumbnails, and handle basic error states.

Checkpoint 4.3: Pricing & Currency Component ✅

[x] Create a FormattedCurrency component that uses locale from i18n.
[x] Ensure correct currency formatting and fallback behavior.
[x] Test with multiple locales.

Phase 5: Screens Implementation

Checkpoint 5.1: Landing Page (Home Screen) ✅

[x] Layout the landing page in pages/[locale]/index.tsx.
[x] Show a hero section, highlight the service proposition.
[x] Integrate LanguageSelector.
[x] Use i18n keys for all text.
[x] Ensure mobile-first styling: test on a mobile viewport.

Checkpoint 5.2: Navigation & Routing ✅

[x] Implement top navigation (mobile-first menu).
[x] Ensure locale-based routing works: /en, /de, etc.
[x] Test that switching locales updates the landing page text.

Checkpoint 5.3: Image Upload Screen

[ ] Create pages/[locale]/upload.tsx.
[ ] Integrate ImageUploader component.
[ ] On successful upload, store image metadata in DB via tRPC.
[ ] Display a loading state for slow connections.

Checkpoint 5.4: Print Configuration Screen

[ ] After image upload, navigate to pages/[locale]/configure.tsx.
[ ] Allow selection of size, material, and preview pricing.
[ ] Implement a SizeSelector, MaterialSelector component (all text from i18n).
[ ] Validate user inputs with Zod.

Checkout & Payment Screen

Checkpoint 5.5: Checkout Screen

[ ] pages/[locale]/checkout.tsx triggers Stripe session creation via tRPC.
[ ] Display final price, item details, and a "Pay Now" button.
[ ] On click, redirect to Stripe Checkout (hosted page).
[ ] Test error states (e.g., Stripe API down).

Checkpoint 5.6: Payment Callback & Confirmation

[ ] Implement Stripe webhook listener server-side (pages/api/stripe-webhook.ts).
[ ] Update order status in DB post-payment success.
[ ] Redirect user to a confirmation screen pages/[locale]/order-confirmed.tsx.
[ ] Confirm i18n on confirmation messages.

Post-Payment Upscaling & Fulfillment

Checkpoint 5.7: Post-Payment Image Upscaling

[ ] On order confirmation, trigger backend function to call Topaz for upscaling.
[ ] Store the upscaled image URL.
[ ] Display an in-progress state on order-confirmed.tsx until upscaling is done.

Checkpoint 5.8: Fulfillment with Prodigi

[ ] After upscaling, trigger Prodigi order creation via backend.
[ ] Update order status and store tracking data.
[ ] Confirm that all operations remain hidden from frontend’s direct knowledge.

Order Tracking & Dashboard

Checkpoint 5.9: Order Tracking Screen

[ ] pages/[locale]/orders.tsx displays user’s order history, using React Query infinite loading.
[ ] Show order statuses fetched from DB.
[ ] i18n for date formatting and status messages.

Phase 6: Testing & QA

Checkpoint 6.1: Unit & Integration Tests

[ ] Write unit tests for utility functions, Zod schemas, and React hooks.
[ ] Integration tests for tRPC endpoints and database operations.
[ ] Component tests with React Testing Library (focus on key components like ImageUploader).

Checkpoint 6.2: E2E Tests

[ ] Test the full flow: landing → upload → configure → checkout → payment → confirmation → orders page.
[ ] Mock external APIs (Topaz, Prodigi, Stripe) during E2E tests.
[ ] Test on mobile viewports and slow network conditions.

Phase 7: Performance & Security Review

Checkpoint 7.1: Performance Optimization

[ ] Check bundle size and use Next.js image optimization.
[ ] Ensure caching is working for tRPC queries.
[ ] Test and fix any slow-loading screens on mobile.

Checkpoint 7.2: Security & Compliance Check

[ ] Confirm GDPR compliance (no personal data leaks).
[ ] Validate inputs on all endpoints.
[ ] Check that environment variables and 3rd-party keys are not exposed to frontend.
[ ] Enable HTTPS and ensure secure cookies if authentication is implemented.

Phase 8: Final Review & Deployment

Checkpoint 8.1: Final Content & Localization Review

[ ] Verify all text strings are translated and no placeholders remain.
[ ] Confirm correct currency formatting and units per locale.

Checkpoint 8.2: Production Deployment

[ ] Deploy to Vercel.
[ ] Test domain routing and locale handling in production environment.
[ ] Final smoke test of the entire user journey.

Checkpoint 8.3: Post-Launch Monitoring

[ ] Set up error tracking (Sentry or similar).
[ ] Monitor Stripe and Prodigi dashboards.
[ ] Gather user feedback and plan incremental improvements.
